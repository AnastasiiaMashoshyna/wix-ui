:import {
    -st-from: "./ToggleSwitch.st.css";
    -st-default: ToggleSwitch;
}

:vars {
    transitionSpeed: 0.3s;
    borderRadius: 50px;

    outerLabelBorderSize: 0;
    outerLabelBorderSizeChecked: 0;
    outerLabelBorderSizeDisabled: 0;
    outerLabelBorderSizeHover: 0;
    outerLabelBorderSizeHoverChecked: 0;

    backgroundColor: grey;
    backgroundColorChecked: grey;
    backgroundColorDisabled: grey;
    backgroundColorHover: grey;
    backgroundColorHoverChecked: grey;
    backgroundColorFocus: grey;

    outerLabelBorderColor: white;
    outerLabelBorderColorChecked: white;
    outerLabelBorderColorDisabled: white;
    outerLabelBorderColorHover: white;
    outerLabelBorderColorHoverChecked: white;

    knobHorizontalMargin: 1px;
    knobVerticalMargin: 1px;

    innerLabelBorderRadius: 50px;
    innerLabelBorderSize: 0;
    innerLabelBorderSizeChecked: 0;
    innerLabelBorderSizeDisabled: 0;
    innerLabelBorderSizeHover: 0;
    innerLabelBorderSizeHoverChecked: 0;

    innerLabelBackgroundColor: white;
    innerLabelBackgroundColorChecked: white;
    innerLabelBackgroundColorDisabled: white;
    innerLabelBackgroundColorHover: white;
    innerLabelBackgroundColorHoverChecked: white;

    color: white;
    colorChecked: white;
    colorDisabled: white;
    colorCheckedDisabled: white;
    colorHover: white;
    colorHoverChecked: white;
    colorFocus: white;

    innerLabelBorderColor: white;
    innerLabelBorderColorChecked: white;
    innerLabelBorderColorDisabled: white;
    innerLabelBorderColorHover: white;
    innerLabelBorderColorHoverChecked: white;

    toggleIconWidth: 8px;
    toggleIconHeight: 6px;
    toggleIconDisplay: none;
    focusOutline: none;
}

.root {
    -st-extends: ToggleSwitch;
}

.root::track,
.root::knob {
    border-radius: value(borderRadius);
    transition: all value(transitionSpeed) ease;
}

.root::track {
    background-color: value(backgroundColor);
    border-width: value(outerLabelBorderSize);
    border-color: value(outerLabelBorderColor);
    border-style: solid;
    box-sizing: border-box;
}

.root::knob {
    left: value(knobHorizontalMargin);
    width: calc(50% - value(knobHorizontalMargin) * 2);
    height: calc(100% - value(knobVerticalMargin) * 2);
    background-color: value(innerLabelBackgroundColor);
    box-shadow: 1.5px 1.5px 1px rgba(0, 0, 0, 0.2);
    border-width: value(innerLabelBorderSize);
    border-color: value(innerLabelBorderColor);
    border-style: solid;
    box-sizing: border-box;
}

.root:checked::knob {
    left: calc(50% + value(knobHorizontalMargin));
}

.root::icon {
    display: value(toggleIconDisplay);
    width: value(toggleIconWidth);
    height: value(toggleIconHeight);
    transition: all value(transitionSpeed) cubic-bezier(1, 0, 1, 0);
}

.root::icon {
    fill: value(color);
}


/* checked state */

.root:checked::track {
    background-color: value(backgroundColorChecked);
    border-width: value(outerLabelBorderSizeChecked);
    border-color: value(outerLabelBorderColorChecked);
}

.root:checked::knob {
    background-color: value(innerLabelBackgroundColorChecked);
    border-width: value(innerLabelBorderSizeChecked);
    border-color: value(innerLabelBorderColorChecked);
}

.root:checked::icon {
    transition: all value(transitionSpeed) cubic-bezier(0, 1, 0, 1);
}

.root:checked::icon {
    fill: value(colorChecked);
}


/* disabled state */

.root:disabled::track,
.root:disabled:hover::track,
.root:disabled:checked::track,
.root:disabled:checked:hover::track {
    background-color: value(backgroundColorDisabled);
    border-width: value(outerLabelBorderSizeDisabled);
    border-color: value(outerLabelBorderColorDisabled);
}

.root:disabled::knob,
.root:disabled:hover::knob,
.root:disabled:checked::knob,
.root:disabled:checked:hover::knob {
    backgroundColor: value(innerLabelBackgroundColorDisabled);
    border-width: value(innerLabelBorderSizeDisabled);
    border-color: value(innerLabelBorderColorDisabled)
}

.root:disabled::icon,
.root:disabled:hover::icon {
    fill: value(colorDisabled);
}

.root:disabled:checked::icon,
.root:disabled:checked:hover::icon {
    fill: value(colorCheckedDisabled);
}

/* hover state */

.root:hover::track {
    background-color: value(backgroundColorHover);
    border-width: value(outerLabelBorderSizeHover);
    border-color: value(outerLabelBorderColorHover);
}

.root:checked:hover::track {
    background-color: value(backgroundColorHoverChecked);
    border-width: value(outerLabelBorderSizeHoverChecked);
    border-color: value(outerLabelBorderColorHoverChecked);
}

.root:hover::knob {
    background-color: value(innerLabelBackgroundColorHover);
    border-width: value(innerLabelBorderSizeHover);
    border-color: value(innerLabelBorderColorHover);
}

.root:checked:hover::knob {
    background-color: value(innerLabelBackgroundColorHoverChecked);
    border-width: value(innerLabelBorderSizeHoverChecked);
    border-color: value(innerLabelBorderColorHoverChecked);
}

.root:hover::icon {
    fill: value(colorHover);
}

.root:checked:hover::icon {
    fill: value(colorHoverChecked);
}

/* focus state */
.root:focus {
    outline: value(focusOutline);
}
